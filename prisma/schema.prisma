// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum For {
  RENT
  SALE
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Type {
  APARTMENT
  HOUSE
  LAND
  OFFICE
  COMMERCIAL
  GARAGE
  PARKING
  STORAGE
}

enum Role {
  USER
  ADMIN
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  name              String
  lastName          String
  phone             String              @unique
  password          String
  email             String              @unique
  credit            Float               @default(0)
  role              Role                @default(USER)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  properties        Property[]
  CreditTransaction CreditTransaction[]

  @@map("users")
}

model Property {
  id              String    @id @default(cuid())
  name            String
  sellerName      String
  sellerPhone     String
  description     String
  price           Float
  status          Status?   @default(ACTIVE)
  for             For
  type            Type
  area            Float
  rooms           Int
  bathrooms       Int
  garage          Int?
  garden          Boolean?
  balcony         Boolean?
  terrace         Boolean?
  pool            Boolean?
  airConditioning Boolean?
  heating         Boolean?
  furnished       Boolean?
  elevator        Boolean?
  parking         Boolean?
  location        String
  images          String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  expiresAt       DateTime? @default(dbgenerated("now() + interval '30 days'"))

  userId            String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  CreditTransaction CreditTransaction[]

  // Indexes for common filtering operations
  @@index([status])
  @@index([for])
  @@index([type])
  @@index([price])
  @@index([rooms])
  @@index([area])
  @@index([location])
  @@index([userId])
  // Composite indexes for common combined filters
  @@index([for, type])
  @@index([for, status])
  @@index([for, price])
  @@index([type, price])
  @@index([for, type, status])
  @@map("properties")
}

model CreditTransaction {
  id          String    @id @default(cuid())
  amount      Float
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertyId  String?
  property    Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  description String?

  @@map("credit_transactions")
}
